### Type definitions saved at 2021-08-27T00:27:09.627Z ###

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
}

type SiteSiteMetadata {
  title: String
  description: String
  siteUrl: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  """Width of the generated low-res preview. Default is 20px"""
  width: Int

  """
  Force the output format for the low-res preview. Default is to use the same
  format as the input. You should rarely need to change this
  """
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type ImageSharp implements Node @childOf(types: ["File"]) @dontInfer {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    """
    A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    """
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: ImageLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the maximum
    display width of the largest image for layout = CONSTRAINED.
    Ignored if layout = FLUID.
    """
    width: Int

    """
    The display height of the generated image for layout = FIXED, and the
    maximum display height of the largest image for layout = CONSTRAINED.
    The image will be cropped if the aspect ratio does not match the source
    image. If omitted, it is calculated from the supplied width,
    matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    TRACED_SVG: a low-resolution traced SVG of the image.
    NONE: no placeholder. Set "background" to use a fixed background color.
    """
    placeholder: ImagePlaceholder

    """
    Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    """
    blurredOptions: BlurredOptions

    """
    Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    """
    tracedSVGOptions: Potrace

    """
    The image formats to generate. Valid values are "AUTO" (meaning the same
    format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [ImageFormat]

    """
    A list of image pixel densities to generate. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1,
    2] for CONSTRAINED. In this case, an image with a constrained layout
    and width = 400 would generate images at 100, 200, 400 and 800px wide.
    Ignored for FULL_WIDTH images, which use breakpoints instead
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. For FIXED and CONSTRAINED images it
    is better to allow these to be determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to decide which images to download.
    You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    does not actually span the full width of the screen, in which case you should pass the correct size here.
    """
    sizes: String

    """The default quality. This is overridden by any format-specific options"""
    quality: Int

    """Options to pass to sharp when generating JPG images."""
    jpgOptions: JPGOptions

    """Options to pass to sharp when generating PNG images."""
    pngOptions: PNGOptions

    """Options to pass to sharp when generating WebP images."""
    webpOptions: WebPOptions

    """Options to pass to sharp when generating AVIF images."""
    avifOptions: AVIFOptions

    """
    Options to pass to sharp to control cropping and other image manipulations.
    """
    transformOptions: TransformOptions

    """
    Background color applied to the wrapper. Also passed to sharp to use as a
    background when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
}

type Pokemon implements Node @derivedTypes @dontInfer {
  image: PokemonImage
  abilities: [PokemonAbilities]
  base_experience: Int
  forms: [PokemonForms]
  game_indices: [PokemonGame_indices]
  height: Int
  held_items: [PokemonHeld_items]
  is_default: Boolean
  location_area_encounters: String
  moves: [PokemonMoves]
  name: String
  order: Int
  past_types: [PokemonPast_types]
  species: PokemonSpecies
  sprites: PokemonSprites
  stats: [PokemonStats]
  types: [PokemonTypes]
  weight: Int
  imgUrl: String
}

type PokemonImage {
  url: File @link(by: "url")
}

type PokemonAbilities @derivedTypes {
  ability: PokemonAbilitiesAbility
  is_hidden: Boolean
  slot: Int
}

type PokemonAbilitiesAbility {
  name: String
  url: String
}

type PokemonForms {
  name: String
  url: String
}

type PokemonGame_indices @derivedTypes {
  game_index: Int
  version: PokemonGame_indicesVersion
}

type PokemonGame_indicesVersion {
  name: String
  url: String
}

type PokemonHeld_items @derivedTypes {
  item: PokemonHeld_itemsItem
  version_details: [PokemonHeld_itemsVersion_details]
}

type PokemonHeld_itemsItem {
  name: String
  url: String
}

type PokemonHeld_itemsVersion_details @derivedTypes {
  rarity: Int
  version: PokemonHeld_itemsVersion_detailsVersion
}

type PokemonHeld_itemsVersion_detailsVersion {
  name: String
  url: String
}

type PokemonMoves @derivedTypes {
  move: PokemonMovesMove
  version_group_details: [PokemonMovesVersion_group_details]
}

type PokemonMovesMove {
  name: String
  url: String
}

type PokemonMovesVersion_group_details @derivedTypes {
  level_learned_at: Int
  move_learn_method: PokemonMovesVersion_group_detailsMove_learn_method
  version_group: PokemonMovesVersion_group_detailsVersion_group
}

type PokemonMovesVersion_group_detailsMove_learn_method {
  name: String
  url: String
}

type PokemonMovesVersion_group_detailsVersion_group {
  name: String
  url: String
}

type PokemonPast_types @derivedTypes {
  generation: PokemonPast_typesGeneration
  types: [PokemonPast_typesTypes]
}

type PokemonPast_typesGeneration {
  name: String
  url: String
}

type PokemonPast_typesTypes @derivedTypes {
  slot: Int
  type: PokemonPast_typesTypesType
}

type PokemonPast_typesTypesType {
  name: String
  url: String
}

type PokemonSpecies {
  name: String
  url: String
}

type PokemonSprites @derivedTypes {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
  other: PokemonSpritesOther
  versions: PokemonSpritesVersions
}

type PokemonSpritesOther @derivedTypes {
  dream_world: PokemonSpritesOtherDream_world
  official_artwork: PokemonSpritesOtherOfficial_artwork @proxy(from: "official-artwork")
}

type PokemonSpritesOtherDream_world {
  front_default: String
}

type PokemonSpritesOtherOfficial_artwork {
  front_default: String
}

type PokemonSpritesVersions @derivedTypes {
  generation_i: PokemonSpritesVersionsGeneration_i @proxy(from: "generation-i")
  generation_ii: PokemonSpritesVersionsGeneration_ii @proxy(from: "generation-ii")
  generation_iii: PokemonSpritesVersionsGeneration_iii @proxy(from: "generation-iii")
  generation_iv: PokemonSpritesVersionsGeneration_iv @proxy(from: "generation-iv")
  generation_v: PokemonSpritesVersionsGeneration_v @proxy(from: "generation-v")
  generation_vi: PokemonSpritesVersionsGeneration_vi @proxy(from: "generation-vi")
  generation_vii: PokemonSpritesVersionsGeneration_vii @proxy(from: "generation-vii")
  generation_viii: PokemonSpritesVersionsGeneration_viii @proxy(from: "generation-viii")
}

type PokemonSpritesVersionsGeneration_i @derivedTypes {
  red_blue: PokemonSpritesVersionsGeneration_iRed_blue @proxy(from: "red-blue")
  yellow: PokemonSpritesVersionsGeneration_iYellow
}

type PokemonSpritesVersionsGeneration_iRed_blue {
  back_default: String
  back_gray: String
  front_default: String
  front_gray: String
}

type PokemonSpritesVersionsGeneration_iYellow {
  back_default: String
  back_gray: String
  front_default: String
  front_gray: String
}

type PokemonSpritesVersionsGeneration_ii @derivedTypes {
  crystal: PokemonSpritesVersionsGeneration_iiCrystal
  gold: PokemonSpritesVersionsGeneration_iiGold
  silver: PokemonSpritesVersionsGeneration_iiSilver
}

type PokemonSpritesVersionsGeneration_iiCrystal {
  back_default: String
  back_shiny: String
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iiGold {
  back_default: String
  back_shiny: String
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iiSilver {
  back_default: String
  back_shiny: String
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iii @derivedTypes {
  emerald: PokemonSpritesVersionsGeneration_iiiEmerald
  firered_leafgreen: PokemonSpritesVersionsGeneration_iiiFirered_leafgreen @proxy(from: "firered-leafgreen")
  ruby_sapphire: PokemonSpritesVersionsGeneration_iiiRuby_sapphire @proxy(from: "ruby-sapphire")
}

type PokemonSpritesVersionsGeneration_iiiEmerald {
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iiiFirered_leafgreen {
  back_default: String
  back_shiny: String
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iiiRuby_sapphire {
  back_default: String
  back_shiny: String
  front_default: String
  front_shiny: String
}

type PokemonSpritesVersionsGeneration_iv @derivedTypes {
  diamond_pearl: PokemonSpritesVersionsGeneration_ivDiamond_pearl @proxy(from: "diamond-pearl")
  heartgold_soulsilver: PokemonSpritesVersionsGeneration_ivHeartgold_soulsilver @proxy(from: "heartgold-soulsilver")
  platinum: PokemonSpritesVersionsGeneration_ivPlatinum
}

type PokemonSpritesVersionsGeneration_ivDiamond_pearl {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_ivHeartgold_soulsilver {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_ivPlatinum {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_v @derivedTypes {
  black_white: PokemonSpritesVersionsGeneration_vBlack_white @proxy(from: "black-white")
}

type PokemonSpritesVersionsGeneration_vBlack_white @derivedTypes {
  animated: PokemonSpritesVersionsGeneration_vBlack_whiteAnimated
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_vBlack_whiteAnimated {
  back_default: String
  back_female: String
  back_shiny: String
  back_shiny_female: String
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_vi @derivedTypes {
  omegaruby_alphasapphire: PokemonSpritesVersionsGeneration_viOmegaruby_alphasapphire @proxy(from: "omegaruby-alphasapphire")
  x_y: PokemonSpritesVersionsGeneration_viX_y @proxy(from: "x-y")
}

type PokemonSpritesVersionsGeneration_viOmegaruby_alphasapphire {
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_viX_y {
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_vii @derivedTypes {
  icons: PokemonSpritesVersionsGeneration_viiIcons
  ultra_sun_ultra_moon: PokemonSpritesVersionsGeneration_viiUltra_sun_ultra_moon @proxy(from: "ultra-sun-ultra-moon")
}

type PokemonSpritesVersionsGeneration_viiIcons {
  front_default: String
}

type PokemonSpritesVersionsGeneration_viiUltra_sun_ultra_moon {
  front_default: String
  front_female: String
  front_shiny: String
  front_shiny_female: String
}

type PokemonSpritesVersionsGeneration_viii @derivedTypes {
  icons: PokemonSpritesVersionsGeneration_viiiIcons
}

type PokemonSpritesVersionsGeneration_viiiIcons {
  front_default: String
  front_female: String
}

type PokemonStats @derivedTypes {
  base_stat: Int
  effort: Int
  stat: PokemonStatsStat
}

type PokemonStatsStat {
  name: String
  url: String
}

type PokemonTypes @derivedTypes {
  slot: Int
  type: PokemonTypesType
}

type PokemonTypesType {
  name: String
  url: String
}